#!/usr/bin/env python3
"""
Test completo para suma_iterativa.txt
Valida todos los aspectos del an√°lisis de complejidad para el algoritmo iterativo de suma.

Este test verifica:
1. Parsing correcto del pseudoc√≥digo
2. An√°lisis b√°sico de complejidad
3. Detecci√≥n de patrones iterativos
4. An√°lisis de programaci√≥n din√°mica
5. Construcci√≥n de √°rboles de recurrencia
6. Integraci√≥n completa del sistema
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.main import AnalizadorCompleto
from src.parser.parser import parse_code
from src.analyzer.complexity_engine import ComplexityEngine
from src.analyzer.dp_analyzer import DynamicProgrammingAnalyzer
from src.analyzer.recurrence_tree_builder import RecurrenceTreeBuilder

def test_suma_iterativa_completo():
    """Test completo del an√°lisis de suma_iterativa.txt"""
    
    print("=" * 80)
    print("TEST COMPLETO: SUMA_ITERATIVA.TXT")
    print("=" * 80)
    
    # 1. Test de carga de archivo
    print("\n1. PRUEBA DE CARGA DE ARCHIVO")
    print("-" * 40)
    
    analizador = AnalizadorCompleto()
    archivo = "examples/suma_iterativa.txt"
    
    try:
        pseudocodigo = analizador.cargar_pseudocodigo(archivo)
        print(f"‚úÖ Archivo cargado exitosamente:")
        print(f"Contenido:\n{pseudocodigo}")
        assert pseudocodigo is not None, "El pseudoc√≥digo no debe ser None"
        assert "suma_iterativa" in pseudocodigo, "Debe contener el nombre de la funci√≥n"
        assert "for i = 1 to n" in pseudocodigo, "Debe contener el bucle iterativo"
    except Exception as e:
        print(f"‚ùå Error cargando archivo: {e}")
        return False
    
    # 2. Test de parsing
    print("\n2. PRUEBA DE PARSING")
    print("-" * 40)
    
    try:
        ast = parse_code(pseudocodigo)
        print(f"‚úÖ AST generado exitosamente")
        print(f"Tipo de nodo ra√≠z: {type(ast).__name__}")
        
        # Verificar estructura del AST
        assert ast is not None, "El AST no debe ser None"
        print(f"Nodos encontrados en el AST:")
        analizador._mostrar_estructura_ast(ast, nivel=0)
        
    except Exception as e:
        print(f"‚ùå Error en parsing: {e}")
        return False
    
    # 3. Test de an√°lisis b√°sico de complejidad
    print("\n3. PRUEBA DE AN√ÅLISIS B√ÅSICO")
    print("-" * 40)
    
    try:
        engine = ComplexityEngine()
        complejidad = engine.analyze_complexity(ast)
        
        print(f"‚úÖ An√°lisis b√°sico completado")
        print(f"Complejidad detectada: {complejidad}")
        
        # Verificaciones espec√≠ficas para suma iterativa
        assert complejidad is not None, "La complejidad no debe ser None"
        # Para suma iterativa esperamos O(n) debido al bucle
        assert "O(n)" in str(complejidad) or "n" in str(complejidad), f"Esperada complejidad O(n), obtenida: {complejidad}"
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis b√°sico: {e}")
        return False
    
    # 4. Test de detecci√≥n de recursi√≥n
    print("\n4. PRUEBA DE DETECCI√ìN DE RECURSI√ìN")
    print("-" * 40)
    
    try:
        # Para suma iterativa NO debe detectar recursi√≥n
        tiene_recursion = analizador._detectar_recursion(ast)
        print(f"‚úÖ Detecci√≥n de recursi√≥n completada")
        print(f"¬øTiene recursi√≥n?: {tiene_recursion}")
        
        # Suma iterativa NO debe tener recursi√≥n
        assert not tiene_recursion, "Suma iterativa no debe ser detectada como recursiva"
        
    except Exception as e:
        print(f"‚ùå Error en detecci√≥n de recursi√≥n: {e}")
        return False
    
    # 5. Test de an√°lisis de programaci√≥n din√°mica
    print("\n5. PRUEBA DE AN√ÅLISIS DE PROGRAMACI√ìN DIN√ÅMICA")
    print("-" * 40)
    
    try:
        dp_analyzer = DynamicProgrammingAnalyzer()
        es_dp, patron_dp, optimizacion = dp_analyzer.analyze(ast)
        
        print(f"‚úÖ An√°lisis DP completado")
        print(f"¬øEs DP?: {es_dp}")
        print(f"Patr√≥n DP: {patron_dp}")
        print(f"Optimizaci√≥n: {optimizacion}")
        
        # Suma iterativa no es t√≠picamente DP, pero puede tener optimizaciones
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis DP: {e}")
        return False
    
    # 6. Test de construcci√≥n de √°rboles de recurrencia
    print("\n6. PRUEBA DE √ÅRBOLES DE RECURRENCIA")
    print("-" * 40)
    
    try:
        tree_builder = RecurrenceTreeBuilder()
        
        # Para algoritmos iterativos, el √°rbol ser√° simple o no aplicable
        print("‚úÖ Constructor de √°rboles inicializado")
        print("‚ÑπÔ∏è  Para algoritmos iterativos, los √°rboles de recurrencia no son aplicables")
        
    except Exception as e:
        print(f"‚ùå Error en construcci√≥n de √°rboles: {e}")
        return False
    
    # 7. Test de integraci√≥n completa
    print("\n7. PRUEBA DE INTEGRACI√ìN COMPLETA")
    print("-" * 40)
    
    try:
        # Simular an√°lisis completo como lo har√≠a el usuario
        print("Ejecutando an√°lisis completo...")
        
        # An√°lisis b√°sico
        print("\nüìä AN√ÅLISIS B√ÅSICO:")
        analizador.analisis_basico(pseudocodigo)
        
        print("\nüîÑ AN√ÅLISIS DE RECURSI√ìN:")
        analizador.analisis_recursion(pseudocodigo)
        
        print("\nüíæ AN√ÅLISIS DE PROGRAMACI√ìN DIN√ÅMICA:")
        analizador.analisis_dp(pseudocodigo)
        
        print("‚úÖ Integraci√≥n completa exitosa")
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n: {e}")
        return False
    
    # 8. Resumen de resultados esperados
    print("\n8. RESUMEN DE RESULTADOS ESPERADOS")
    print("-" * 40)
    
    print("""
    üìã RESULTADOS ESPERADOS PARA SUMA_ITERATIVA:
    
    ‚úÖ Complejidad temporal: O(n)
       - Un bucle que itera de 1 a n
       - Operaciones constantes dentro del bucle
    
    ‚úÖ Complejidad espacial: O(1)
       - Solo variables locales (s, i)
       - No recursi√≥n, no estructuras adicionales
    
    ‚úÖ Tipo de algoritmo: Iterativo
       - No hay llamadas recursivas
       - Patr√≥n de bucle simple
    
    ‚úÖ Patr√≥n identificado: Suma aritm√©tica
       - Suma de enteros consecutivos
       - F√≥rmula matem√°tica equivalente: n*(n+1)/2
    
    ‚ö†Ô∏è  Optimizaci√≥n posible:
       - Podr√≠a optimizarse a O(1) usando la f√≥rmula matem√°tica
       - return n * (n + 1) / 2
    """)
    
    print("\n" + "=" * 80)
    print("‚úÖ TEST SUMA_ITERATIVA COMPLETADO EXITOSAMENTE")
    print("=" * 80)
    
    return True

def test_comparacion_con_formula_matematica():
    """Test adicional: comparar con la f√≥rmula matem√°tica optimizada"""
    
    print("\n" + "=" * 80)
    print("TEST ADICIONAL: COMPARACI√ìN CON F√ìRMULA MATEM√ÅTICA")
    print("=" * 80)
    
    print("""
    üîç AN√ÅLISIS DE OPTIMIZACI√ìN:
    
    Algoritmo actual (suma_iterativa.txt):
    - Complejidad: O(n)
    - Espacio: O(1)
    - M√©todo: iterativo con bucle
    
    Algoritmo optimizado (f√≥rmula matem√°tica):
    - Complejidad: O(1)
    - Espacio: O(1)  
    - M√©todo: return n * (n + 1) / 2
    
    üí° RECOMENDACI√ìN:
    Para casos de uso en producci√≥n, considerar usar la f√≥rmula matem√°tica
    directa para mejor rendimiento en valores grandes de n.
    
    üìä EJEMPLO DE DIFERENCIA:
    - n = 1,000,000
    - Iterativo: 1,000,000 operaciones
    - F√≥rmula: 3 operaciones (multiplicaci√≥n, suma, divisi√≥n)
    """)

if __name__ == "__main__":
    """Ejecutar todos los tests"""
    
    print("üöÄ INICIANDO BATER√çA DE TESTS PARA SUMA_ITERATIVA")
    
    try:
        # Test principal
        exito = test_suma_iterativa_completo()
        
        if exito:
            # Test adicional
            test_comparacion_con_formula_matematica()
            
            print(f"\nüéâ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE")
            print(f"‚úÖ El sistema maneja correctamente el algoritmo suma_iterativa.txt")
            
        else:
            print(f"\n‚ùå ALGUNOS TESTS FALLARON")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• ERROR CR√çTICO EN TESTS: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)