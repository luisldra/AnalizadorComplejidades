#!/usr/bin/env python3
"""Test del an√°lisis completo de recursi√≥n para factorial."""

import sys
import os
root_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, root_dir)

from src.parser.parser import parse_code
from src.analyzer.recurrence_solver import RecursiveAlgorithmAnalyzer

def test_full_recursion_analysis():
    """Test del an√°lisis completo de recursi√≥n."""
    
    print("üîç TEST DEL AN√ÅLISIS COMPLETO DE RECURSI√ìN")
    print("=" * 60)
    
    code = """
    function factorial(n)
    begin
        if n <= 1
        begin
            return 1
        end
        else
        begin
            return n * call factorial(n - 1)
        end
    end
    """
    
    # Parse el c√≥digo
    print("üìù Parseando c√≥digo...")
    ast = parse_code(code)
    
    # Crear analizador
    analyzer = RecursiveAlgorithmAnalyzer()
    
    # Encontrar la funci√≥n factorial
    factorial_func = None
    if hasattr(ast, 'functions'):
        for func in ast.functions:
            if hasattr(func, 'name') and func.name == 'factorial':
                factorial_func = func
                break
    
    if not factorial_func:
        print("‚ùå No se encontr√≥ la funci√≥n factorial")
        return
    
    # Analizar la funci√≥n factorial
    print("üîç Analizando patr√≥n de recursi√≥n...")
    result = analyzer.analyze_recursive_algorithm(factorial_func)
    
    print(f"\nüìä RESULTADO DEL AN√ÅLISIS:")
    print(f"=" * 40)
    
    for key, value in result.items():
        print(f"{key}: {value}")
    
    if factorial_func:
        print(f"\nüîç AN√ÅLISIS ESPEC√çFICO DE FACTORIAL:")
        print(f"=" * 40)
        
        # Encontrar llamadas recursivas
        calls = analyzer._find_recursive_calls(factorial_func)
        print(f"Llamadas recursivas encontradas: {len(calls)}")
        
        # Analizar el patr√≥n
        if calls:
            pattern_analysis = analyzer._analyze_call_pattern(calls)
            print(f"An√°lisis del patr√≥n: {pattern_analysis}")
            
            # Derivar relaci√≥n de recurrencia
            relation = analyzer._derive_recurrence_relation(factorial_func, calls)
            print(f"Relaci√≥n de recurrencia: {relation}")

if __name__ == "__main__":
    test_full_recursion_analysis()