// =======================
// Grammar for pseudocode
// =======================

start: function+

// -------- Functions --------
function: FUNCTION NAME "(" params? ")" block
params: NAME ("," NAME)*

// -------- Blocks --------
block: BEGIN statement* END

// -------- Statements --------
statement: assignment
         | array_assignment
         | matrix_assignment  
         | array_declaration
         | matrix_declaration
         | if_statement
         | while_statement
         | for_statement
         | repeat_statement
         | return_statement
         | call_statement
         | COMMENT

// -------- Assignment --------
assignment: NAME ASSIGN expr

// -------- Arrays --------
array_assignment: NAME "[" expr "]" ASSIGN expr
array_declaration: "array" NAME "[" expr "]"

// -------- Matrices --------
matrix_assignment: NAME "[" expr "]" "[" expr "]" ASSIGN expr
matrix_declaration: "matrix" NAME "[" expr "]" "[" expr "]"

// -------- If --------
if_statement: IF bool_expr block ELSE block
           | IF bool_expr THEN block ELSE block
           | IF bool_expr block
           | IF bool_expr THEN block

// -------- While --------
while_statement: WHILE bool_expr block
              | WHILE "(" bool_expr ")" block  
              | WHILE bool_expr DO block
              | WHILE "(" bool_expr ")" DO block

// -------- For --------
for_statement: FOR NAME ASSIGN expr TO expr DO block

// -------- Repeat --------
repeat_statement: REPEAT block UNTIL "(" bool_expr ")"

// -------- Return --------
return_statement: RETURN expr

// -------- Call --------
call_statement: CALL NAME "(" args? ")"
args: expr ("," expr)*

// -------- Expressions --------
?expr: arith_expr
     | bool_expr

?bool_expr: bool_term
          | bool_expr OR bool_term  -> bool_or

?bool_term: bool_factor
          | bool_term AND bool_factor -> bool_and

?bool_factor: bool_atom
            | NOT bool_factor -> bool_not

?bool_atom: comparison
          | NAME  -> var_bool
          | "true"  -> bool_true
          | "false" -> bool_false
          | "(" bool_expr ")"

?comparison: arith_expr comparator arith_expr -> condition

?arith_expr: term
           | arith_expr "+" term   -> add
           | arith_expr "-" term   -> sub

?term: factor
     | term "*" factor -> mul
     | term "/" factor -> div

?factor: NUMBER
       | NAME
       | NAME "[" expr "]"   -> array_access
       | NAME "[" expr "]" "[" expr "]" -> matrix_access
       | CALL NAME "(" args? ")"  -> call_expr
       | "(" arith_expr ")"

?comparator: EQUAL | NEQ | LT | GT | LE | GE

// -------- Tokens --------
ASSIGN: "←" | ":=" | "="
COMMENT: "►" /[^\n]/*
%ignore COMMENT

// Keywords (must come before NAME)
AND: "and"
OR: "or"
NOT: "not"
BEGIN: "begin"
END: "end"
IF: "if"  
THEN: "then"
ELSE: "else"
WHILE: "while"
DO: "do"
FOR: "for"
TO: "to"
REPEAT: "repeat"
UNTIL: "until"
FUNCTION: "function"
RETURN: "return"
CALL: "call"

// Comparison operators  
EQUAL: "=="
NEQ: "!="
LT: "<" 
GT: ">"
LE: "<="
GE: ">="

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /\d+/

%ignore /[ \t\r\n]+/
